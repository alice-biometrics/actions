name: Lume CI

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
        default: python
        description: Select the language (Use python or node)
      python_version:
        required: false
        type: string
        default: 3.9
      lume_version:
        required: false
        type: string
        default: latest
      lume_config_filename:
        required: false
        type: string
        default: lume.yml
      pre_commands:
        required: false
        type: string
        default: ""
      post_setup_commands:
        required: false
        type: string
        default: ""
      post_commands:
        required: false
        type: string
        default: ""
    secrets:
      gke_project:
        required: false
      gke_key:
        required: false
      github_access_token:
        required: false

env:
  LUME_CONFIG_FILENAME: ${{ inputs.lume_config_filename}}
  GITHUB_ACCESS_TOKEN: ${{ secrets.github_access_token}}
  GKE_PROJECT: ${{ secrets.gke_project}}
  GKE_KEY: ${{ secrets.gke_key}}

jobs:
  lume-ci:
    name: Lume CI
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@v0.2.1
        if: env.GKE_PROJECT && env.GKE_KEY
        with:
          project_id: ${{ secrets.gke_project }}
          service_account_key: ${{ secrets.gke_key }}
          export_default_credentials: true

      - name: Setup Python
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python_version }}

      - uses: actions/cache@v2
        if: ${{ inputs.language == 'python' }}
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev-requirements.txt') }}

      - name: Setup Node
        uses: actions/setup-node@v2
        if: ${{ inputs.language == 'node' }}
        with:
          node-version: 12
          registry-url: https://npm.pkg.github.com
          always-auth: true

      - name: Get yarn cache directory path
        if: ${{ inputs.language == 'node' }}
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        if: ${{ inputs.language == 'node' }}
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Lume
        run: |
          version=${{ inputs.lume_version}}
          if [ "$version" = "latest" ]; then
              pip install -U lume
          else
              pip install -U lume==$version
          fi

      - name: Pre Commands
        if: ${{ inputs.pre_commands != '' }}
        run: |
          IFS=","
          read -r -a pre_commands <<< "${{ inputs.pre_commands}}"
          if [[ ${#pre_commands[@]} > 1 ]]; then
            for command in ${pre_commands[@]}; do lume -$command; done
          elif  [[ ${#pre_commands[@]} = 1 ]]; then
            echo "lume -$pre_commands" | bash -
          fi

      - name: Install
        run: lume -install

      - name: Setup (If required)
        run: lume -setup --no-strict

      - name: Post Setup Commands
        if: ${{ inputs.post_setup_commands != '' }}
        run: |
          IFS="," 
          read -r -a post_setup_commands <<< "${{ inputs.post_setup_commands}}"
          if [[ ${#post_setup_commands[@]} > 1 ]]; then
            for command in ${post_setup_commands[@]}; do lume -$command; done
          elif  [[ ${#post_setup_commands[@]} = 1 ]]; then
            echo "lume -$post_setup_commands" | bash -
          fi

      - name: Check Requirements
        run: lume -check-requirements

      - name: Static Analysis
        run: lume -static-analysis

      - name: Lint
        run: lume -lint

      - name: Unit Tests
        run: lume -test-unit

      - name: Integration Tests
        run: lume -test-integration

      - name: Acceptance Tests
        run: lume -test-acceptance

      - name: Post Commands
        if: ${{ inputs.post_commands != '' }}
        run: |
          IFS="," 
          read -r -a post_commands <<< "${{ inputs.post_commands}}"
          if [[ ${#post_commands[@]} > 1 ]]; then
            for command in ${post_commands[@]}; do lume -$command; done
          elif  [[ ${#post_commands[@]} = 1 ]]; then
            echo "lume -$post_commands" | bash -
          fi

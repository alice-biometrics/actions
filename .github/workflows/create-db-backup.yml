name: Create Backup Database

on:
  workflow_call:
    inputs: 
      gcp-cloud-sql-instance:
        required: true
        type: string 
        default: alice-database  
    secrets:
      gke_project_id:
        required: true
      gke_service_account_key:
        required: true

jobs:
  backup_database:
    name: Create Backup
    runs-on: ubuntu-latest
    steps:

    - uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        project_id:  ${{ secrets.gke_project_id }}
        service_account_key: ${{ secrets.gke_service_account_key }}
        export_default_credentials: true

    - name: Backup Database
      run: |
        echo "Launch Backup:"
        gcloud sql backups create --instance=${{ inputs.gcp-cloud-sql-instance }} --verbosity=debug
    - name: Show info about created backup
      run: |
        echo "Last backup:"
        gcloud sql backups list --instance=${{ inputs.gcp-cloud-sql-instance }} --project ${{ secrets.gke_project_id  }} --filter="type:ON_DEMAND" | head -n 2
    - name: Check number of backups on demand
      id: backup
      run: | 
        backup_list=`gcloud sql backups list --instance=${{ inputs.gcp-cloud-sql-instance }} --project ${{ secrets.gke_project_id  }} --filter="type:ON_DEMAND" | wc -l`
        echo "Number of ON_DEMAND backups:"
        gcloud sql backups list --instance=${{ inputs.gcp-cloud-sql-instance }} --project ${{ secrets.gke_project_id  }} --filter="type:ON_DEMAND" | wc -l
        unset RETENTION
        if [ "$backup_list" -gt "8" ] ; then
          RETENTION=true
          echo set-output name=RETENTION::$RETENTION; 
          echo ::set-output name=RETENTION::$RETENTION; 
        fi
    - name: Check retention before delete first on demand backup of this database 
      if: steps.backup.outputs.RETENTION
      run: |
        first_backup=`gcloud sql backups list --instance=${{ inputs.gcp-cloud-sql-instance }} --project ${{ secrets.gke_project_id }} --filter="type:ON_DEMAND" | tail -n 1 | cut -d ' ' -f1`
        gcloud sql backups delete $first_backup --instance=${{ inputs.gcp-cloud-sql-instance }} --quiet  
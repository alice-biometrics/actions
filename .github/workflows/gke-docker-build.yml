name: GKE Docker Build

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string 
      tag:
        required: true
        type: string 
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      working_directory:
        required: false
        type: string
        default: .
      additional_tag:
        required: false
        type: string
        default: latest
      publish: 
        required: false
        type: boolean
        default: true
      update_version_and_deploy_files:
        required: false
        type: boolean
        default: true
      base_image:
        required: false
        type: string 
      base_version:
        required: false
        type: string  
        default: latest
      timeout_minutes: 
        required: false
        type: number
        default: 30
    outputs:
      build_timestamp:
        description: "Timestamp for the time just prior to build"
        value: ${{ jobs.gke-docker-build.outputs.build_timestamp }}
      failure_info:
        description: "Information about the failure"
        value: ${{ jobs.gke-docker-build.outputs.failure_info }}

    secrets:
      gke_project:
        required: true
      gke_key:
        required: true
      github_access_token:
        required: false

env:
  TAG: ${{ inputs.tag }}
  DOCKERFILE: ${{ inputs.dockerfile }}
  REGISTRY: eu.gcr.io/${{ secrets.gke_project}}
  IMAGE: ${{ inputs.image }}
  IMAGE_PATH: eu.gcr.io/${{ secrets.gke_project}}/${{ inputs.image }}
  GITHUB_ACCESS_TOKEN: ${{ secrets.github_access_token}}
  BASE_IMAGE: ${{ inputs.base_image }}
  BASE_VERSION: ${{ inputs.base_version }}
  FAILURE_INFO: Failure on gke-docker-build.
  
jobs:
  gke-docker-build:
    name: GKE Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}
    outputs:
      build_timestamp: ${{ steps.update_version_and_deploy_files.outputs.build_timestamp }}
      failure_info: ${{ steps.set_output_if_failure.outputs.failure_info}}
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id:  ${{ secrets.gke_project }}
          service_account_key: ${{ secrets.gke_key }}
          export_default_credentials: true
      - name: Gcloud Auth
        run: gcloud auth configure-docker
      - name: Check if docker image already exists
        id: check-build-status
        continue-on-error: true
        run: docker manifest inspect ${IMAGE_PATH}:${TAG} > /dev/null
      - name: Set BASE_IMAGE if required 
        if: env.BASE_IMAGE == null
        run: echo "BASE_IMAGE=${IMAGE}" >> $GITHUB_ENV
      - name: Update VERSION and DEPLOY Files 
        if: ${{ inputs.update_version_and_deploy_files == true && steps.check-build-status.outcome == 'failure'}}
        id: update_version_and_deploy_files
        working-directory: ${{inputs.working_directory}}
        run: |
          BUILD_TIMESTAMP=$(date -u --rfc-3339=seconds)
          echo ${TAG} > app/VERSION
          echo ${BUILD_TIMESTAMP} > app/DEPLOY
          echo "::set-output name=build_timestamp::${BUILD_TIMESTAMP}"
      - name: Docker Build
        if:  ${{ env.GITHUB_ACCESS_TOKEN == '' && steps.check-build-status.outcome == 'failure' }}
        id: docker_build
        working-directory: ${{inputs.working_directory}}
        run: |
          echo "Building docker image ${IMAGE_PATH} (${TAG}) from Dockerfile (${DOCKERFILE})"
          docker build -t ${IMAGE_PATH}:${TAG} -f ${PWD}/${DOCKERFILE} \
          --build-arg REGISTRY=${REGISTRY} \
          --build-arg BASE_IMAGE=${BASE_IMAGE} \
          --build-arg BASE_VERSION=${BASE_VERSION} .
          echo "Docker image is taged with ${IMAGE_PATH}:${TAG}"
      - name: Docker Build With GITHUB_ACCESS_TOKEN
        if:  ${{ env.GITHUB_ACCESS_TOKEN != '' && steps.check-build-status.outcome == 'failure'}}
        id: docker_build_with_github_access_token
        working-directory: ${{inputs.working_directory}}
        run: |
          echo "Building docker image ${IMAGE_PATH} (${TAG}) from Dockerfile (${DOCKERFILE}) with GITHUB_ACCESS_TOKEN"
          echo ${{ env.GITHUB_ACCESS_TOKEN}} > secret-github-access-token.txt
          DOCKER_BUILDKIT=1 docker build -t ${IMAGE_PATH}:${TAG} -f ${PWD}/${DOCKERFILE} \
          --build-arg REGISTRY=${REGISTRY} \
          --build-arg BASE_IMAGE=${BASE_IMAGE} \
          --build-arg BASE_VERSION=${BASE_VERSION} \
          --secret id=github-access-token,src=secret-github-access-token.txt .
          echo "Docker image is taged with ${IMAGE_PATH}:${TAG}"
      - name: Failure Info [Build]
        if:  failure() && steps.docker_build.outcome == 'failure' || steps.docker_build_with_github_access_token.outcome == 'failure'
        run: |
          FAILURE_INFO="Failure creating of the image ${IMAGE}:${TAG} (${DOCKERFILE})"
          echo "FAILURE_INFO=${FAILURE_INFO}" >> $GITHUB_ENV
          echo "FAILURE_INFO: ${FAILURE_INFO}"
      - name: Check Docker 
        if:  ${{ steps.check-build-status.outcome == 'failure' }}
        id: check_docker
        uses: azure/container-scan@v0
        with:
          image-name: ${{env.IMAGE_PATH}}:${{env.TAG}}
          run-quality-checks: True
      - name: Failure Info [Check Docker]
        if:  failure() && steps.check_docker.outcome == 'failure'
        run: |
          FAILURE_INFO="Failure checking the vulnerabilities of the image ${IMAGE}:${TAG} (${DOCKERFILE})"
          echo "FAILURE_INFO=${FAILURE_INFO}" >> $GITHUB_ENV
          echo "FAILURE_INFO: ${FAILURE_INFO}"
      - name: Add Additional Tag 
        if: ${{ inputs.additional_tag != '' &&  steps.check-build-status.outcome == 'failure' }}
        run: |
          docker tag ${IMAGE_PATH}:${TAG} ${IMAGE_PATH}:${{inputs.additional_tag}}
          echo "Docker image is taged with ${IMAGE_PATH}:${{inputs.additional_tag}}"
      - name: Publish Docker
        if: ${{ inputs.publish == true && steps.check-build-status.outcome == 'failure' }}
        id: publish_docker
        run: docker push ${IMAGE_PATH}:${TAG}
      - name: Publish Additional Tag
        if: ${{ inputs.additional_tag != '' && inputs.publish == true && steps.check-build-status.outcome == 'failure' }}
        id: publish_docker_additional_tag
        run: docker push ${IMAGE_PATH}:${{inputs.additional_tag}} 
      - name: Failure Info [Publish]
        if: failure() && steps.publish_docker.outcome == 'failure' || steps.publish_docker_additional_tag.outcome == 'failure'
        run: |
          FAILURE_INFO="Failure publishing the image ${IMAGE}:${TAG} (${DOCKERFILE})"
          echo "FAILURE_INFO=${FAILURE_INFO}" >> $GITHUB_ENV
          echo "FAILURE_INFO: ${FAILURE_INFO}"
      - name: Set Output if failure
        if: failure()
        id: set_output_if_failure
        run: echo "::set-output name=failure_info::${FAILURE_INFO}"



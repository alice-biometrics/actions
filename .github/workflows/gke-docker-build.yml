name: GKE Docker Build

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string 
      tag:
        required: true
        type: string 
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      working_directory:
        required: false
        type: string
        default: .
      additional_tag:
        required: false
        type: string
        default: latest
      publish: 
        required: false
        type: boolean
        default: true
      update_version_and_deploy_files:
        required: false
        type: boolean
        default: true
      timeout_minutes:
        required: false
        type: number
        default: 30
      skip_scan:
        required: false
        type: boolean
        default: false
      pre_build:
        required: false
        type: string
        default: ""
    outputs:
      build_timestamp:
        description: "Timestamp for the time just prior to build"
        value: ${{ jobs.gke-docker-build.outputs.build_timestamp }}
    secrets:
      gke_project:
        required: true
      gke_key:
        required: true
      github_access_token:
        required: false

env:
  TAG: ${{ inputs.tag }}
  DOCKERFILE: ${{ inputs.dockerfile }}
  REGISTRY: eu.gcr.io/${{ secrets.gke_project}}
  IMAGE: eu.gcr.io/${{ secrets.gke_project}}/${{ inputs.image }}
  GITHUB_ACCESS_TOKEN: ${{ secrets.github_access_token}}

jobs:
  gke-docker-build:
    name: GKE Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}

    outputs:
      build_timestamp: ${{ steps.update_version_and_deploy_files.outputs.build_timestamp }}

    steps:

      - uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id:  ${{ secrets.gke_project }}
          service_account_key: ${{ secrets.gke_key }}
          export_default_credentials: true

      - name: Gcloud Auth
        run: gcloud auth configure-docker

      - name: Check if docker image already exists
        id: check-build-status
        continue-on-error: true
        run: |
          if docker manifest inspect ${IMAGE}:${TAG} > /dev/null 2> /dev/null; then
              echo "::set-output name=result::exist"
              echo "::warning ::Docker image ${IMAGE}:${TAG} already exist in the registry"
          else
              echo "::set-output name=result::not_exist"
          fi

      - name: Update VERSION and DEPLOY Files (if the app folder exists)
        if: ${{ inputs.update_version_and_deploy_files == true && steps.check-build-status.outputs.result == 'not_exist'}}
        id: update_version_and_deploy_files
        working-directory: ${{inputs.working_directory}}
        run: |
          BUILD_TIMESTAMP=$(date -u --rfc-3339=seconds)
          if [ -d "app" ]; then
             echo ${TAG} > app/VERSION
             echo ${BUILD_TIMESTAMP} > app/DEPLOY
          fi
          echo "::set-output name=build_timestamp::${BUILD_TIMESTAMP}"

      - name: Hadolin - Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: ${{inputs.dockerfile}}
        continue-on-error: true

      - name: Docker Build
        if:  ${{ env.GITHUB_ACCESS_TOKEN == '' && steps.check-build-status.outputs.result == 'not_exist' }}
        working-directory: ${{inputs.working_directory}}
        run: |
          echo "Building docker image ${IMAGE} (${TAG}) from Dockerfile (${DOCKERFILE})"
          DOCKER_BUILDKIT=1 docker build -t ${IMAGE}:${TAG} -f ${PWD}/${DOCKERFILE} \
          --build-arg REGISTRY=${REGISTRY} \
          --build-arg TAG=${TAG} \
          --build-arg BUILD_TIMESTAMP="${{steps.update_version_and_deploy_files.outputs.build_timestamp}}" \
          --build-arg IMAGE=${IMAGE} .
          echo "::debug ::Docker image is tagged with ${IMAGE}:${TAG}"

      - name: Pre-Build
        if: ${{ inputs.pre_build != '' }}
        working-directory: ${{inputs.working_directory}}
        run: ${{ inputs.pre_build }}

      - name: Docker Build With GITHUB_ACCESS_TOKEN
        if:  ${{ env.GITHUB_ACCESS_TOKEN != '' && steps.check-build-status.outputs.result == 'not_exist'}}
        working-directory: ${{inputs.working_directory}}
        run: |
          echo "Building docker image ${IMAGE} (${TAG}) from Dockerfile (${DOCKERFILE}) with GITHUB_ACCESS_TOKEN"
          echo ${{ env.GITHUB_ACCESS_TOKEN}} > secret-github-access-token.txt
          DOCKER_BUILDKIT=1 docker build -t ${IMAGE}:${TAG} -f ${PWD}/${DOCKERFILE} \
          --build-arg REGISTRY=${REGISTRY} \
          --build-arg TAG=${TAG} \
          --build-arg BUILD_TIMESTAMP="${{steps.update_version_and_deploy_files.outputs.build_timestamp}}" \
          --build-arg IMAGE=${IMAGE} \
          --secret id=github-access-token,src=secret-github-access-token.txt .
          echo "::debug ::Docker image is tagged with ${IMAGE}:${TAG}"

      - name: Scan Docker
        if:  ${{ inputs.skip_scan == false && steps.check-build-status.outputs.result == 'not_exist' }}
        uses: azure/container-scan@v0
        with:
          image-name: ${{env.IMAGE}}:${{env.TAG}}
          run-quality-checks: True
        continue-on-error: true          

      - name: Add Additional Tag
        if: ${{ inputs.additional_tag != '' &&  steps.check-build-status.outputs.result == 'not_exist' }}
        run: |
          docker tag ${IMAGE}:${TAG} ${IMAGE}:${{inputs.additional_tag}}
          echo "::debug ::Docker image is tagged with ${IMAGE}:${{inputs.additional_tag}}"

      - name: Publish Docker
        if: ${{ inputs.publish == true && steps.check-build-status.outputs.result == 'not_exist' }}
        run: docker push ${IMAGE}:${TAG}

      - name: Publish Additional Tag
        if: ${{ inputs.additional_tag != '' && inputs.publish == true && steps.check-build-status.outputs.result == 'not_exist' }}
        run: docker push ${IMAGE}:${{inputs.additional_tag}}